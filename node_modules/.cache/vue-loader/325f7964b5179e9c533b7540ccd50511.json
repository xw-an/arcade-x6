{"remainingRequest":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/xuewei/Desktop/开源项目/arcade-x6/src/layouts/components/Menu.vue?vue&type=style&index=0&id=74da1289&scoped=true&lang=css","dependencies":[{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/src/layouts/components/Menu.vue","mtime":1689495360703},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/css-loader/dist/cjs.js","mtime":1689430341713},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1689430343246},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/postcss-loader/src/index.js","mtime":1689430342188},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/cache-loader/dist/cjs.js","mtime":1689430340827},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/index.js","mtime":1689430342169}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qLmFudC1tZW51LWl0ZW0tc2VsZWN0ZWQgeyovCi8qICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY2ZjIyICFpbXBvcnRhbnQ7Ki8KLyogIGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50OyovCi8qfSovCgo="},{"version":3,"sources":["/Users/xuewei/Desktop/开源项目/arcade-x6/src/layouts/components/Menu.vue"],"names":[],"mappings":";AAuJA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC","file":"/Users/xuewei/Desktop/开源项目/arcade-x6/src/layouts/components/Menu.vue","sourceRoot":"","sourcesContent":["<template>\n  <a-menu mode=\"horizontal\"\n          :open-keys=\"openKeys\"\n          :selectedKeys=\"selectedKeys\"\n          @openChange=\"onOpenChange\"\n  >\n    <template v-for=\"item of menuList\">\n      <!-- 存在children子菜单情况 -->\n      <a-sub-menu v-if=\"item.childrenList\" :key=\"item.id\">\n        <template #icon>\n          <component :is=\"$icons[item.icon]\" />\n        </template>\n        <template #title>\n          <span>{{ item.name }}</span>\n        </template>\n        <!-- 子菜单 -->\n        <a-menu-item :key=\"child.id\" v-for=\"child of item.childrenList\"\n                     @click=\"handleMenuItem(child.path, child.id)\"\n        >\n          <component :is=\"$icons[child.icon]\" />\n          <span>{{ child.name }}</span>\n        </a-menu-item>\n      </a-sub-menu>\n      <!-- 不存在子菜单情况 -->\n      <a-menu-item v-else @click=\"handleMenuItem(item.path, item.id)\" :key=\"item.id\" >\n        <component :is=\"$icons[item.icon]\" />\n        <span>{{ item.name }}</span>\n      </a-menu-item>\n    </template>\n  </a-menu>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { useRouter,useRoute } from 'vue-router'\n\n// 对menu的处理逻辑\nconst useMenuEffect = () =>{\n  const route = useRoute()\n  const router = useRouter()\n  const menuList = [\n    {\n      id: 1,\n      icon: 'ToolOutlined',\n      name: '组件列表',\n      path: '/tools'\n    },\n    {\n      id: 2,\n      icon: 'ClusterOutlined',\n      name: '流程列表',\n      path: '/flows'\n    },\n    {\n      id: 3,\n      icon: 'BarsOutlined',\n      name: '任务管理',\n      path: '/task',\n    },\n    // {\n    //   id: 3,\n    //   icon: 'QrcodeOutlined',\n    //   name: '流量管理',\n    //   childrenList:\n    //   [{\n    //     id: 31,\n    //     icon: 'PlaySquareOutlined',\n    //     name: '录制流量',\n    //     path: '/traffic/record'\n    //   },\n    //   {\n    //     id: 32,\n    //     icon: 'VideoCameraOutlined',\n    //     name: '回放流量',\n    //     path: '/traffic/playback'\n    //   }]\n    // }\n  ]\n  const selectedKeys = ref([])\n  const openKeys = ref([])\n  const rootSubmenuKeys = []\n  const handleMenuItem = (path, id) =>{\n    selectedKeys.value = [id]\n    router.push({path: path})\n  }\n  const curSelectKey = () =>{\n    let path = route.path.toString()\n    let id = 1\n    selectedKeys.value = [id]\n    menuList.forEach(obj => {\n      if (obj.path) {\n        if (path.indexOf(obj.path) != -1) {\n        // if (obj.path.includes(path)) {\n          id = obj.id\n          selectedKeys.value = [id]\n        }\n      } else {\n        obj.childrenList.forEach(child => {\n          if (path.indexOf(child.path) != -1) {\n          // if (child.path.includes(path)) {\n            id = child.id\n            selectedKeys.value = [id]\n          }\n        })\n      }\n    })\n\n  }\n  const curOpenKey = () => {\n    let path = route.path.toString().split('/')[1]\n    let id = 1\n    openKeys.value = []\n    menuList.forEach(obj => {\n      if (obj.path) {\n        if (path.indexOf(obj.path) != -1) {\n          id = obj.id\n          openKeys.value = [id]\n        }\n      } else {\n        obj.childrenList.forEach(child => {\n          if (path.indexOf(child.path) != -1) {\n            id = obj.id\n            openKeys.value = [id]\n          }\n        })\n      }\n    })\n  }\n  const onOpenChange = (openKeys) =>{\n    const latestOpenKey = openKeys.find(key => openKeys.indexOf(key) === -1)\n    if (rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n      openKeys.value = openKeys\n    } else {\n      openKeys.value = latestOpenKey ? [latestOpenKey] : []\n    }\n  }\n  return { menuList, openKeys,selectedKeys,handleMenuItem, onOpenChange,curSelectKey, curOpenKey }\n}\n\nexport default {\n  name: 'BaseMenu',\n  setup() {\n    const { menuList, openKeys,selectedKeys,handleMenuItem, onOpenChange,curSelectKey, curOpenKey } = useMenuEffect()\n    curSelectKey()\n    curOpenKey()\n    return { menuList, openKeys,selectedKeys,handleMenuItem, onOpenChange }\n  }\n}\n</script>\n\n<style scoped>\n/*.ant-menu-item-selected {*/\n/*  background-color: #ff6f22 !important;*/\n/*  color: white !important;*/\n/*}*/\n\n</style>\n"]}]}