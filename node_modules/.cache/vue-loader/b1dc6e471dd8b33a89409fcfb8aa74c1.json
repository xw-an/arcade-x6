{"remainingRequest":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/components/ToolStyleConfig.vue?vue&type=style&index=0&id=4fcdde42&scoped=true&lang=css","dependencies":[{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/components/ToolStyleConfig.vue","mtime":1688889086306},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/css-loader/dist/cjs.js","mtime":1689430341713},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1689430343246},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/postcss-loader/src/index.js","mtime":1689430342188},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/cache-loader/dist/cjs.js","mtime":1689430340827},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/index.js","mtime":1689430342169}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb2xvci1jb250YWluZXIgewogIG1hcmdpbi10b3A6IDhweDsKICB3aWR0aDogMjRweDsKICBoZWlnaHQ6IDI0cHg7CiAgcGFkZGluZzogNHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNkZmUzZTg7CiAgYm9yZGVyLXJhZGl1czogMnB4Owp9Ci5lZGl0LWNvbG9yIHsKICBjdXJzb3I6IHBvaW50ZXI7CiAgaGVpZ2h0OiAxMDAlOwp9Cg=="},{"version":3,"sources":["/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/components/ToolStyleConfig.vue"],"names":[],"mappings":";AAyTA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACpB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd","file":"/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/components/ToolStyleConfig.vue","sourceRoot":"","sourcesContent":["<template>\n  <a-form :model=\"formNodeStyle\" :label-col=\"{ span: 3}\" :wrapper-col=\"{ span: 20 ,offset: 1 }\" style=\"margin-top: 5px\">\n    <a-form-item label=\"uuid\">\n      <a-input :value=\"node.id\" disabled/>\n    </a-form-item>\n    <a-form-item label=\"标题\">\n      <a-input v-model:value=\"formNodeStyle.label\" @change=\"handleLabel(node)\"/>\n    </a-form-item>\n    <a-form-item label=\"字号\" >\n      <a-input-number v-model:value=\"formNodeStyle.fontSize\" @change=\"handleFontSize(node)\"/>\n    </a-form-item>\n    <a-form-item label=\"文字\">\n      <a-popover :visible=\"textColorVisible\" placement=\"leftTop\" trigger=\"click\" title=\"修改边框色\">\n        <template #content>\n          <a-row style=\"margin-bottom: 10px\">\n            <sketch-picker v-model=\"textColors\"/>\n          </a-row>\n          <a-row>\n            <a-col :span=\"17\">\n              <a-button @click=\"cancelTextFill\">取消</a-button>\n            </a-col>\n            <a-col :span=\"7\">\n              <a-button type=\"primary\" @click=\"handleTextFill(node)\">确定</a-button>\n            </a-col>\n          </a-row>\n        </template>\n        <div class=\"color-container\">\n          <div class=\"edit-color\" :style=\"{backgroundColor: node.attrs?node.attrs.text.fill:''}\" @click=\"showTextFill\"/>\n        </div>\n      </a-popover>\n    </a-form-item>\n    <a-form-item label=\"填充\">\n      <a-popover :visible=\"fillColorVisible\" placement=\"leftTop\" trigger=\"click\" title=\"修改填充色\">\n        <template #content>\n          <a-row style=\"margin-bottom: 10px\">\n            <sketch-picker v-model=\"bodyFillColors\"/>\n          </a-row>\n          <a-row>\n            <a-col :span=\"17\">\n              <a-button @click=\"cancelBodyFill\">取消</a-button>\n            </a-col>\n            <a-col :span=\"7\">\n              <a-button type=\"primary\" @click=\"handleBodyFill(node)\">确定</a-button>\n            </a-col>\n          </a-row>\n        </template>\n        <div class=\"color-container\">\n          <div class=\"edit-color\" :style=\"{backgroundColor: node.attrs?node.attrs.body.fill:''}\" @click=\"showBodyFill\"></div>\n        </div>\n      </a-popover>\n    </a-form-item>\n    <a-form-item label=\"边框\">\n      <a-popover :visible=\"strokeColorVisible\" placement=\"leftTop\" trigger=\"click\" title=\"修改边框色\">\n        <template #content>\n          <a-row style=\"margin-bottom: 10px\">\n            <sketch-picker v-model=\"strokeColors\"/>\n          </a-row>\n          <a-row>\n            <a-col :span=\"17\">\n              <a-button @click=\"cancelBodyStroke\">取消</a-button>\n            </a-col>\n            <a-col :span=\"7\">\n              <a-button type=\"primary\" @click=\"handleBodyStroke(node)\">确定</a-button>\n            </a-col>\n          </a-row>\n        </template>\n        <div class=\"color-container\">\n          <div class=\"edit-color\" :style=\"{backgroundColor: node.attrs?node.attrs.body.stroke:''}\" @click=\"showBodyStroke\"></div>\n        </div>\n      </a-popover>\n    </a-form-item>\n  </a-form>\n  <a-button type=\"primary\" style=\"bottom: 10px;right:25px;position: fixed\" @click=\"saveStyle(node)\">保存</a-button>\n</template>\n\n<script>\n\nimport {reactive, ref, watchEffect} from \"vue\";\nimport {updateNode} from \"@/api/request\";\nimport {message} from \"ant-design-vue\";\nimport { Sketch } from '@ckpack/vue-color';\nimport {useRouter} from \"vue-router/dist/vue-router\";\nimport {useStore} from \"vuex\";\n\nconst formNodeStyle = reactive({\n  label: '',\n  fontSize: 0,\n  textFill: '',\n  bodyFill: '',\n  bodyStroke: ''\n})\n\n// 文字颜色\nconst useTextColorEffect = ()=>{\n  // 文字选色器是否显示\n  const textColorVisible = ref(false)\n  const textColors = ref('')\n  // 取消文字颜色\n  const cancelTextFill = () => {\n    textColorVisible.value = false\n  }\n  // 显示文字颜色\n  const showTextFill = () => {\n    textColorVisible.value = true\n  }\n  // 更新文字颜色\n  const handleTextFill = (node) => {\n    node.setAttrs({\n      text: {\n        fill: formNodeStyle.textFill\n      }}\n    )\n    textColorVisible.value = false\n  }\n  watchEffect(() => {\n    formNodeStyle.textFill = textColors?.value?.hex\n  })\n  return {\n    textColorVisible,\n    textColors,\n    cancelTextFill,\n    showTextFill,\n    handleTextFill\n  }\n}\n\n// 填充颜色\nconst useBodyFillColorEffect = ()=>{\n  // 填充色选色器是否显示\n  const fillColorVisible = ref(false)\n  const bodyFillColors = ref('')\n  // 显示填充色选色器\n  const showBodyFill = () => {\n    fillColorVisible.value = true\n  }\n  // 取消填充色选色器\n  const cancelBodyFill = () => {\n    fillColorVisible.value = false\n  }\n  // 选择填充选色器颜色\n  const handleBodyFill = (node) => {\n    node.setAttrs({\n      body: {\n        fill: formNodeStyle.bodyFill\n      },\n      top: {\n        fill: formNodeStyle.bodyFill\n      }\n    })\n    fillColorVisible.value = false\n  }\n  watchEffect(() => {\n    formNodeStyle.bodyFill = bodyFillColors?.value?.hex\n  })\n  return {\n    fillColorVisible,\n    bodyFillColors,\n    cancelBodyFill,\n    showBodyFill,\n    handleBodyFill\n  }\n}\n\n// 边框颜色\nconst useStrokeColorEffect = ()=>{\n  // 边框色选色器是否显示\n  const strokeColorVisible = ref(false)\n  const strokeColors = ref('')\n  // 显示边框色选色器\n  const showBodyStroke = () => {\n    strokeColorVisible.value = true\n  }\n  // 取消边框色选色器\n  const cancelBodyStroke = () => {\n    strokeColorVisible.value = false\n  }\n  // 选择边框选色器颜色\n  const handleBodyStroke = (node) => {\n    node.setAttrs({\n      body: {\n        stroke: formNodeStyle.bodyStroke\n      },\n      top: {\n        stroke: formNodeStyle.bodyStroke\n      }\n    })\n    strokeColorVisible.value = false\n  }\n  watchEffect(() => {\n    formNodeStyle.bodyStroke = strokeColors?.value?.hex\n  })\n  return {\n    strokeColorVisible,\n    strokeColors,\n    showBodyStroke,\n    cancelBodyStroke,\n    handleBodyStroke\n  }\n}\n\n// 标题\nconst useLabelEffect = ()=>{\n  const handleLabel = (node)=>{\n    if (node.attrs?.label) {\n      node.setAttrs({\n        label: {\n          text: formNodeStyle.label\n        }\n      })\n    } else {\n      node.setLabel(formNodeStyle.label)\n    }\n  }\n  return {\n    handleLabel\n  }\n}\n\n// 字体大小\nconst useFontSizeEffect = ()=>{\n  const handleFontSize = (node)=>{\n    node.setAttrs({\n      text: {\n        fontSize: Number(formNodeStyle.fontSize)\n      }\n    })\n  }\n  return {\n    handleFontSize\n  }\n}\n\nconst processInstanceId = ref(0)\nconst author = ref('')\n\n// 右侧样式面板操作\nconst useParamsEffect = (props,ctx)=>{\n  // 保存修改的样式参数\n  const saveStyle = async(node)=> {\n    const pos = node?.position()\n    const name = node.shape===\"custom-text\"?node.attrs.label?.text:node.attrs.text?.text\n    let req = {\n      \"processNode\": {\n        \"versionId\": props.versionId,\n        \"processInstanceId\": processInstanceId.value,\n        \"uuid\": node.id,\n        \"name\": name,\n        // \"type\": node.shape,\n        \"position\": pos.x+\",\"+pos.y,\n        \"updatedBy\": author.value\n      },\n      \"processInstanceParameter\": [\n        {\n          \"versionId\": props.versionId,\n          \"parameterType\": \"样式信息\",\n          \"parameterName\": \"style\",\n          \"parameterValue\": \"{\" +\n              \"\\\"label\\\": \\\"\"+name+\"\\\", \" +\n              \"\\\"fontSize\\\": \\\"\"+node.attrs.text?.fontSize+\"\\\", \" +\n              \"\\\"textFill\\\": \\\"\"+node.attrs.text?.fill+\"\\\", \" +\n              \"\\\"bodyFill\\\": \\\"\"+node.attrs.body?.fill+\"\\\", \" +\n              \"\\\"strokeColor\\\": \\\"\"+node.attrs.body?.stroke+\"\\\"}\",\n          \"updatedBy\": author.value\n        }]\n    }\n    await updateNode(req).then(res=>{\n      if(res.code === 0){\n        message.success(\"[\"+req.processNode.name+\"]样式更新成功;\"+\"id:\"+node.id)\n        ctx.emit('close')\n      } else {\n        message.error(\"[\"+req.processNode.name+\"]样式更新失败：\"+res.message)\n      }\n    })\n  }\n  return {\n    saveStyle\n  }\n}\n\nexport default {\n  name: \"ToolStyleConfig\",\n  props: ['node','versionId'],\n  emits: ['close'],\n  components: { SketchPicker: Sketch},\n  setup(props,ctx){\n    const router = useRouter()\n    const store = useStore()\n    processInstanceId.value = router.currentRoute.value.params.processInstanceId\n    author.value = store.state.user.account\n    const {textColorVisible, textColors, cancelTextFill, showTextFill, handleTextFill} = useTextColorEffect()\n    const {fillColorVisible, bodyFillColors, cancelBodyFill, showBodyFill, handleBodyFill} = useBodyFillColorEffect()\n    const {strokeColorVisible, strokeColors, showBodyStroke, cancelBodyStroke, handleBodyStroke} = useStrokeColorEffect()\n    const {handleLabel} = useLabelEffect()\n    const {handleFontSize} = useFontSizeEffect()\n    const {saveStyle} = useParamsEffect(props,ctx)\n    watchEffect( () => {\n      if(props.node?.attrs){\n        formNodeStyle.label = props.node.label? props.node.label : props.node.attrs.label?.text\n        formNodeStyle.fontSize = props.node.attrs ? props.node.attrs.text.fontSize : ''\n      }\n    })\n    return {\n      formNodeStyle,handleLabel,handleFontSize,\n      textColorVisible,textColors,cancelTextFill,showTextFill,handleTextFill,\n      fillColorVisible,bodyFillColors,handleBodyFill,showBodyFill,cancelBodyFill,\n      strokeColorVisible,strokeColors,handleBodyStroke,showBodyStroke,cancelBodyStroke,\n      saveStyle\n    }\n  }\n}\n</script>\n\n<style scoped>\n.color-container {\n  margin-top: 8px;\n  width: 24px;\n  height: 24px;\n  padding: 4px;\n  border: 1px solid #dfe3e8;\n  border-radius: 2px;\n}\n.edit-color {\n  cursor: pointer;\n  height: 100%;\n}\n</style>\n"]}]}