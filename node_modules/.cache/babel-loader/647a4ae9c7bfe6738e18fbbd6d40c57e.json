{"remainingRequest":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/thread-loader/dist/cjs.js!/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/babel-loader/lib/index.js!/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/FlowDetail.vue?vue&type=template&id=57f13128&scoped=true","dependencies":[{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/FlowDetail.vue","mtime":1689427370067},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/babel.config.js","mtime":1667046646049},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/cache-loader/dist/cjs.js","mtime":1689430340827},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/thread-loader/dist/cjs.js","mtime":1689430340741},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/babel-loader/lib/index.js","mtime":1689430342224},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1689430343293},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/cache-loader/dist/cjs.js","mtime":1689430340827},{"path":"/Users/xuewei/Desktop/开源项目/arcade-x6/node_modules/vue-loader-v16/dist/index.js","mtime":1689430342169}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBub3JtYWxpemVDbGFzcyBhcyBfbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBfY3JlYXRlRWxlbWVudFZOb2RlLCB2U2hvdyBhcyBfdlNob3csIHdpdGhEaXJlY3RpdmVzIGFzIF93aXRoRGlyZWN0aXZlcywgd2l0aEN0eCBhcyBfd2l0aEN0eCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwpjb25zdCBfd2l0aFNjb3BlSWQgPSBuID0+IChfcHVzaFNjb3BlSWQoImRhdGEtdi01N2YxMzEyOCIpLCBuID0gbigpLCBfcG9wU2NvcGVJZCgpLCBuKTsKY29uc3QgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImZsb3ctZGl2Igp9Owpjb25zdCBfaG9pc3RlZF8yID0gewogIGlkOiAiY29udGFpbmVyIgp9Owpjb25zdCBfaG9pc3RlZF8zID0gewogIGlkOiAiZ3JhcGgtY29udGFpbmVyIiwKICByZWY6ICJncmFwaENvbiIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICBjb25zdCBfY29tcG9uZW50X2dyYXBoX2NvbmZpZ19jb250YWluZXIgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZ3JhcGgtY29uZmlnLWNvbnRhaW5lciIpOwogIGNvbnN0IF9jb21wb25lbnRfbm9kZV9jb25maWdfY29udGFpbmVyID0gX3Jlc29sdmVDb21wb25lbnQoIm5vZGUtY29uZmlnLWNvbnRhaW5lciIpOwogIGNvbnN0IF9jb21wb25lbnRfZWRnZV9jb25maWdfY29udGFpbmVyID0gX3Jlc29sdmVDb21wb25lbnQoImVkZ2UtY29uZmlnLWNvbnRhaW5lciIpOwogIGNvbnN0IF9jb21wb25lbnRfYV9kcmF3ZXIgPSBfcmVzb2x2ZUNvbXBvbmVudCgiYS1kcmF3ZXIiKTsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfZ3JhcGhfY29uZmlnX2NvbnRhaW5lciwgewogICAgZ3JhcGhDb25maWc6ICRzZXR1cC5ncmFwaENvbmZpZywKICAgIHZlcnNpb25JZDogJHNldHVwLmN1cnJlbnRWZXJzaW9uSWQsCiAgICBwcm9jZXNzSW5zdGFuY2VJZDogJHNldHVwLnByb2Nlc3NJbnN0YW5jZUlkLAogICAgb25VcGRhdGVWZXJzaW9uOiAkc2V0dXAuaGFuZGxlVXBkYXRlVmVyc2lvbgogIH0sIG51bGwsIDgsIFsiZ3JhcGhDb25maWciLCAidmVyc2lvbklkIiwgInByb2Nlc3NJbnN0YW5jZUlkIiwgIm9uVXBkYXRlVmVyc2lvbiJdKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMiwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIHsKICAgIGlkOiAic3RlbmNpbCIsCiAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKHsKICAgICAgJ2Rpc2FibGVkLWl0ZW0nOiAkc2V0dXAuaXNEaXNhYmxlZAogICAgfSkKICB9LCBudWxsLCAyKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMywgbnVsbCwgNTEyKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfYV9kcmF3ZXIsIHsKICAgIHBsYWNlbWVudDogInJpZ2h0IiwKICAgIGNsb3NhYmxlOiBmYWxzZSwKICAgIHZpc2libGU6ICRzZXR1cC5jb25maWdWaXNpYmxlLAogICAgb25DbG9zZTogJHNldHVwLmhhbmRsZUNsb3NlQ29uZmlnLAogICAgd2lkdGg6IDcwMCwKICAgIGZvb3RlcjogJHNldHVwLmZvb3RlckNvbnRlbnQKICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eCgoKSA9PiBbX3dpdGhEaXJlY3RpdmVzKF9jcmVhdGVWTm9kZShfY29tcG9uZW50X25vZGVfY29uZmlnX2NvbnRhaW5lciwgewogICAgICBjbGFzczogX25vcm1hbGl6ZUNsYXNzKHsKICAgICAgICAnZGlzYWJsZWQtaXRlbSc6ICRzZXR1cC5pc0Rpc2FibGVkCiAgICAgIH0pLAogICAgICBub2RlOiAkc2V0dXAuY3VyTm9kZSwKICAgICAgdmlzaWJsZTogJHNldHVwLmNvbmZpZ1Zpc2libGUsCiAgICAgIHZlcnNpb25JZDogJHNldHVwLmN1cnJlbnRWZXJzaW9uSWQsCiAgICAgIG9uRGVsZXRlOiAkc2V0dXAuZGVsZXRlTm9kZUFwaSwKICAgICAgb25DbG9zZTogJHNldHVwLmhhbmRsZUNsb3NlQ29uZmlnCiAgICB9LCBudWxsLCA4LCBbImNsYXNzIiwgIm5vZGUiLCAidmlzaWJsZSIsICJ2ZXJzaW9uSWQiLCAib25EZWxldGUiLCAib25DbG9zZSJdKSwgW1tfdlNob3csICRzZXR1cC5pc05vZGVdXSksIF93aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lZGdlX2NvbmZpZ19jb250YWluZXIsIHsKICAgICAgY2xhc3M6IF9ub3JtYWxpemVDbGFzcyh7CiAgICAgICAgJ2Rpc2FibGVkLWl0ZW0nOiAkc2V0dXAuaXNEaXNhYmxlZAogICAgICB9KSwKICAgICAgZWRnZTogJHNldHVwLmN1ckVkZ2UsCiAgICAgIHZlcnNpb25JZDogJHNldHVwLmN1cnJlbnRWZXJzaW9uSWQsCiAgICAgIG9uRGVsZXRlOiAkc2V0dXAuZGVsZXRlTGlua0FwaQogICAgfSwgbnVsbCwgOCwgWyJjbGFzcyIsICJlZGdlIiwgInZlcnNpb25JZCIsICJvbkRlbGV0ZSJdKSwgW1tfdlNob3csICEkc2V0dXAuaXNOb2RlXV0pXSksCiAgICBfOiAxCiAgfSwgOCwgWyJ2aXNpYmxlIiwgIm9uQ2xvc2UiLCAiZm9vdGVyIl0pXSldKTsKfQ=="},{"version":3,"mappings":";;;EAEOA,KAAK,EAAC;AAAU;;EAEdC,EAAE,EAAC;AAAW;;EAEZA,EAAE,EAAC,iBAAiB;EAACC,GAAG,EAAC;;;;;;;uBAJlCC,oBAwBM,OAxBNC,UAwBM,GAvBJC,aAAsLC;IAA7JC,WAAW,EAAEC,kBAAW;IAAGC,SAAS,EAAED,uBAAgB;IAAGE,iBAAiB,EAAEF,wBAAiB;IAAGG,eAAa,EAAEH;qFACxII,oBAqBM,OArBNC,UAqBM,GApBJD,oBAA8D;IAAzDX,EAAE,EAAC,SAAS;IAAED,KAAK;MAAA,iBAAmBQ;IAAU;eACrDI,oBAA+C,OAA/CE,UAA+C,cAC/CT,aAWWU;IAVPC,SAAS,EAAC,OAAO;IAChBC,QAAQ,EAAE,KAAK;IACfC,OAAO,EAAEV,oBAAa;IACtBW,OAAK,EAAEX,wBAAiB;IACxBY,KAAK,EAAE,GAAG;IACVC,MAAM,EAAEb;;sBAEX,MAA+N,iBAA/NH,aAA+NiB;MAAvMtB,KAAK;QAAA,iBAAmBQ;MAAU;MAAoBe,IAAI,EAAEf,cAAO;MAAGU,OAAO,EAAEV,oBAAa;MAAGC,SAAS,EAAED,uBAAgB;MAAGgB,QAAM,EAAEhB,oBAAa;MAAGW,OAAK,EAAEX;6FAA/GA,aAAM,qBAC3EH,aAA4KoB;MAApJzB,KAAK;QAAA,iBAAmBQ;MAAU;MAAqBkB,IAAI,EAAElB,cAAO;MAAGC,SAAS,EAAED,uBAAgB;MAAGgB,QAAM,EAAEhB;wEAA/DA,aAAM","names":["class","id","ref","_createElementBlock","_hoisted_1","_createVNode","_component_graph_config_container","graphConfig","$setup","versionId","processInstanceId","onUpdateVersion","_createElementVNode","_hoisted_2","_hoisted_3","_component_a_drawer","placement","closable","visible","onClose","width","footer","_component_node_config_container","node","onDelete","_component_edge_config_container","edge"],"sourceRoot":"","sources":["/Users/xuewei/Desktop/开源项目/arcade-x6/src/views/flows/FlowDetail.vue"],"sourcesContent":["<template>\n<!--  <div class=\"shade\" v-if=\"configVisible\"></div>-->\n  <div class=\"flow-div\">\n    <graph-config-container :graphConfig=\"graphConfig\" :versionId=\"currentVersionId\" :processInstanceId=\"processInstanceId\" @updateVersion=\"handleUpdateVersion\"></graph-config-container>\n    <div id=\"container\">\n      <div id=\"stencil\" :class=\"{'disabled-item':isDisabled}\"></div>\n      <div id=\"graph-container\" ref=\"graphCon\"></div>\n      <a-drawer\n          placement=\"right\"\n          :closable=\"false\"\n          :visible=\"configVisible\"\n          @close=\"handleCloseConfig\"\n          :width=\"700\"\n          :footer=\"footerContent\"\n      >\n        <node-config-container :class=\"{'disabled-item':isDisabled}\" v-show=\"isNode\" :node=\"curNode\" :visible=\"configVisible\" :versionId=\"currentVersionId\" @delete=\"deleteNodeApi\" @close=\"handleCloseConfig\"></node-config-container>\n        <edge-config-container :class=\"{'disabled-item':isDisabled}\" v-show=\"!isNode\" :edge=\"curEdge\" :versionId=\"currentVersionId\" @delete=\"deleteLinkApi\"></edge-config-container>\n<!--        <span class=\"iconfont collpase-icon\" @click=\"handleCloseConfig\">&#xe68a;</span>-->\n      </a-drawer>\n<!--      <div v-if=\"configVisible\" id=\"config-container\">-->\n<!--        <node-config-container v-show=\"isNode\" :node=\"curNode\" :visible=\"configVisible\"></node-config-container>-->\n<!--        <edge-config-container v-show=\"!isNode\" :edge=\"curEdge\"></edge-config-container>-->\n<!--        <span class=\"iconfont collpase-icon\" @click=\"handleCloseConfig\">&#xe68a;</span>-->\n<!--      </div>-->\n<!--      <span v-if=\"!configVisible\" class=\"iconfont open-icon\" @click=\"handleOpenConfig\">&#xe689;</span>-->\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Graph, Shape, Addon } from '@antv/x6'\nimport '@antv/x6-vue-shape'\nimport GraphConfigContainer from \"@/views/flows/components/GraphConfigContainer\";\nimport NodeConfigContainer from \"@/views/flows/components/NodeConfigContainer\";\nimport EdgeConfigContainer from \"@/views/flows/components/EdgeConfigContainer\";\nimport {ref, onMounted} from \"vue\";\nimport {\n  createLink,\n  createNode,\n  deleteLink,\n  deleteNode,\n  detailInstance,\n  updateLinkTarget,\n  updateNodeCoordinate, updateNodeSize\n} from \"@/api/request\";\nimport {useRouter} from \"vue-router\";\nimport {useStore} from \"vuex\";\nimport {message} from \"ant-design-vue\";\n\n// 初始化画布\nlet graph = {}\nlet curNode = ref({})\nlet curEdge = ref({})\nconst isNode = ref(true)\nconst processInstanceId = ref(0)\nconst author = ref('')\n// 画布相关操作\nconst useGraphEffect = ()=>{\n  // 初始化画布\n  const initGraph = ()=>{\n    // 初始化画布\n    graph = new Graph({\n      container: document.getElementById('graph-container'),\n      grid: true,\n      mousewheel: {\n        enabled: true,\n        zoomAtMousePosition: true,\n        modifiers: 'ctrl',\n        minScale: 0.5,\n        maxScale: 3\n      },\n      connecting: {\n        router: {\n          name: 'manhattan',\n          args: {\n            padding: 1\n          }\n        },\n        connector: {\n          name: 'rounded',\n          args: {\n            radius: 8\n          }\n        },\n        anchor: 'center',\n        connectionPoint: 'anchor',\n        allowBlank: true,\n        snap: {\n          radius: 20\n        },\n        createEdge () {\n          return new Shape.Edge({\n            attrs: {\n              line: {\n                stroke: '#4A4A4A',\n                strokeWidth: 2,\n                targetMarker: {\n                  name: 'block',\n                  width: 12,\n                  height: 8\n                }\n              }\n            },\n            zIndex: 0\n          })\n        },\n        validateConnection ({ targetMagnet }) {\n          return !!targetMagnet\n        }\n      },\n      highlighting: {\n        magnetAdsorbed: {\n          name: 'stroke',\n          args: {\n            attrs: {\n              fill: '#5F95FF',\n              stroke: '#5F95FF'\n            }\n          }\n        }\n      },\n      resizing: true,\n      rotating: true,\n      // selecting: {\n      //   enabled: true,\n      //   rubberband: true,\n      //   showNodeSelectionBox: true\n      // },\n      selecting:{\n        enabled: true,\n        pointerEvents: \"none\", // 新属性\n        showNodeSelectionBox: true\n        // multiple: true,\n      },\n      snapline: true,\n      keyboard: true,\n      clipboard: true,\n      history: true,\n      translating: {\n        restrict: true,\n      },\n      transforming: {\n        clearAll: true,\n        clearOnBlankMouseDown: true,\n      },\n      panning: {\n        enabled: true,\n      }\n    })\n  }\n  // 画布绑定监听事件\n  const graphOnEvent = ()=> {\n    // 控制连接桩显示/隐藏\n    const showPorts = (ports, show) => {\n      for (let i = 0, len = ports.length; i < len; i = i + 1) {\n        ports[i].style.visibility = show ? 'visible' : 'hidden'\n      }\n    }\n    graph.on('node:mouseenter', () => {\n      const container = document.getElementById('graph-container')\n      const ports = container.querySelectorAll('.x6-port-body')\n      showPorts(ports, true)\n    })\n    graph.on('node:mouseleave', () => {\n      const container = document.getElementById('graph-container')\n      const ports = container.querySelectorAll('.x6-port-body')\n      showPorts(ports, false)\n    })\n    graph.on('blank:click', () => {\n      console.log('监听到点击画布')\n      // 收缩右侧配置面板\n      useConfigPanel().handleCloseConfig()\n    })\n    // 监听调节节点大小\n    graph.on('node:resized', ({ node }) => {\n      curNode.value = node\n      isNode.value = true\n      console.log('监听调整大小一个控件id：')\n      const size = node.size()\n      useNodeEffect().updateSize(node,size.width,size.height)\n    })\n    // 监听移动画布的节点\n    graph.on('node:moved', ({ node }) => {\n      curNode.value = node\n      isNode.value = true\n      console.log('监听到移动一个控件id：' + node.id)\n      if (node.label=='开始'||node.label=='结束') {\n        // 收缩右侧配置面板\n        useConfigPanel().handleCloseConfig()\n      }\n      useNodeEffect().updateXY(node,node.position().x,node.position().y)\n    })\n    // 监听点击画布的节点\n    graph.on('node:click', ({ node }) => {\n      curNode.value = node\n      isNode.value = true\n      console.log('监听到点击一个控件id：'+node.id)\n      if (node.label=='开始'||node.label=='结束') {\n        // 收缩右侧配置面板\n        useConfigPanel().handleCloseConfig()\n        message.info('开始/结束节点不可配置')\n      } else {\n        // 打开右侧配置面板\n        useConfigPanel().handleOpenConfig()\n      }\n      // useConfigPanel().handleOpenConfig()\n      // console.log(e)\n      // console.log(x)\n      // console.log(y)\n      // console.log(view)\n    })\n    // 监听画布添加节点动作\n    graph.on('node:added', ({ node}) => {\n      curNode.value = node\n      isNode.value = true\n      console.log('监听到拖入一个控件id开始：' + node.id)\n      // 收缩右侧配置面板\n      useConfigPanel().handleCloseConfig()\n      useNodeEffect().createNodeApi(curNode.value) // 调用后端接口创建节点\n      console.log('监听到拖入一个控件id结束：' + node.id)\n      // console.log(index)\n      // console.log(options)\n    })\n    // 监听画布移除节点动作\n    graph.on('node:removed', ({node}) => {\n      // let name = node.shape===\"custom-text\"?node.attrs.label?.text:node.attrs.text?.text\n      // // 如果是开始/结束节点不调接口删除\n      // if(name == '开始'||name == '结束'){\n      //   message.error('开始/结束节点不能删除')\n      //   return\n      // }\n      curNode.value = node\n      console.log('监听到移除一个控件id开始：' + node.id)\n      // 收缩右侧配置面板\n      // useConfigPanel().handleCloseConfig()\n      // useNodeEffect().deleteNodeApi(curNode.value)\n      console.log('监听到移除一个控件id结束：' + node.id)\n      // console.log(index)\n      // console.log(options)\n    })\n    // 监听节点之间连接动作\n    graph.on('edge:added', ({ edge}) => {\n      isNode.value = false\n      curEdge.value = edge\n      console.log('监听到连接线动作开始：' + edge.id)\n      // 收缩右侧配置面板\n      useConfigPanel().handleCloseConfig()\n      useNodeEffect().createLinkApi(curEdge.value)\n      console.log('监听到连接线动作结束：' + edge.id)\n    })\n    graph.on('edge:change:target', ({cell, current}) => {\n      isNode.value = false\n      console.log('监听到连接线change动作开始：')\n      // console.log(cell)\n      // console.log(current)\n      // console.log(previous)\n      // console.log(options)\n      // console.log(cell.getSourcePortId())\n      // console.log(cell.getTargetPortId())\n      if (cell.id && current.cell&&cell.getTargetPortId()&&cell.getSourcePortId()) {\n        const obj = {\n          id: cell.id,\n          targetNodeId: current.cell,\n          targetPortId: cell.getTargetPortId(),\n          sourcePortId: cell.getSourcePortId()\n        }\n        console.log(obj)\n        useNodeEffect().updateTargetApi(obj)\n      }\n      console.log('监听到连接线change动作结束：')\n    })\n    // 监听点击节点之间连接动作\n    graph.on('edge:click', ({ edge }) => {\n      isNode.value = false\n      curEdge.value = edge\n      console.log('监听到点击连接线动作开始：' + edge.id)\n      // 打开右侧配置面板\n      useConfigPanel().handleOpenConfig()\n      // console.log(e)\n      // console.log(x)\n      // console.log(y)\n      // console.log(view)\n    })\n    // 监听节点之间移除连接动作\n    graph.on('edge:removed', ({ edge}) => {\n      isNode.value = false\n      curEdge.value = edge\n      console.log('监听到移除连接线动作开始：' + edge.id)\n      // 收缩右侧配置面板\n      // useConfigPanel().handleCloseConfig()\n      // useNodeEffect().deleteLinkApi(curEdge.value)\n      console.log('监听到移除连接线动作结束：' + edge.id)\n      // console.log('edge:removed')\n      // console.log(edge)\n      // console.log(index)\n      // console.log(options)\n    })\n  }\n  // 绑定画布快捷键\n  const graphBindKey =() =>{\n    // todo 暂时不用，因为撤回没有实时更新数据\n    // graph.bindKey(['meta+c', 'ctrl+c'], () => {\n    //   const cells = graph.getSelectedCells()\n    //   if (cells.length) {\n    //     graph.copy(cells)\n    //   }\n    //   return false\n    // })\n    // graph.bindKey(['meta+x', 'ctrl+x'], () => {\n    //   const cells = graph.getSelectedCells()\n    //   if (cells.length) {\n    //     graph.cut(cells)\n    //   }\n    //   return false\n    // })\n    // graph.bindKey(['meta+v', 'ctrl+v'], () => {\n    //   if (!graph.isClipboardEmpty()) {\n    //     const cells = graph.paste({ offset: 32 })\n    //     graph.cleanSelection()\n    //     graph.select(cells)\n    //   }\n    //   return false\n    // })\n    // // undo redo\n    // graph.bindKey(['meta+z', 'ctrl+z'], () => {\n    //   if (graph.history.canUndo()) {\n    //     graph.history.undo()\n    //   }\n    //   return false\n    // })\n    // graph.bindKey(['meta+shift+z', 'ctrl+shift+z'], () => {\n    //   if (graph.history.canRedo()) {\n    //     graph.history.redo()\n    //   }\n    //   return false\n    // })\n    // select all\n    graph.bindKey(['meta+a', 'ctrl+a'], () => {\n      const nodes = graph.getNodes()\n      if (nodes) {\n        graph.select(nodes)\n      }\n    })\n    // delete\n    graph.bindKey('backspace', () => {\n      const cells = graph.getSelectedCells()\n      if (cells.length) {\n        // 收缩右侧配置面板\n        useConfigPanel().handleCloseConfig()\n        // 调接口删除\n        cells.forEach(cell=> {\n          if (cell.isNode()) {\n            useNodeEffect().deleteNodeApi(cell)\n          } else {\n            useNodeEffect().deleteLinkApi(cell)\n          }\n        })\n        // graph.removeCells(cells)\n      }\n    })\n    // zoom\n    graph.bindKey(['ctrl+1', 'meta+1'], () => {\n      const zoom = graph.zoom()\n      if (zoom < 1.5) {\n        graph.zoom(0.1)\n      }\n    })\n    graph.bindKey(['ctrl+2', 'meta+2'], () => {\n      const zoom = graph.zoom()\n      if (zoom > 0.5) {\n        graph.zoom(-0.1)\n      }\n    })\n  }\n  return {initGraph,graphOnEvent,graphBindKey}\n}\n\n// 左侧控件面板\nconst useStencilEffect = ()=>{\n  let stencil = {}\n  // 初始化左侧流程控件面板\n  const initStencil = () =>{\n    stencil = new Addon.Stencil({\n      title: '流程图',\n      target: graph,\n      stencilGraphWidth: 250,\n      stencilGraphHeight: 320,\n      collapsable: true,\n      notFoundText: '暂未匹配到结果',\n      search: (cell, keyword, groupName, stencil) => {\n        console.log(groupName)\n        console.log(stencil)\n        if (keyword) {\n          return cell?.label?.includes(keyword)\n        }\n        return true\n      },\n      groups: [\n        {\n          title: '基础节点',\n          name: 'group1'\n        },\n        // {\n        //   title: '图片节点',\n        //   name: 'group2',\n        //   graphHeight: 250,\n        //   layoutOptions: {\n        //     rowHeight: 70\n        //   }\n        // }\n      ],\n      layoutOptions: {\n        columns: 2,\n        columnWidth: 110,\n        rowHeight: 60\n      }\n    })\n    document.getElementById('stencil').appendChild(stencil.container)\n  }\n  // 初始化链接桩\n  let ports = {}\n  // 初始化链接桩\n  const initPorts = () => {\n    ports = {\n      groups: {\n        top: {\n          position: 'top',\n          attrs: {\n            circle: {\n              r: 4,\n              magnet: true,\n              stroke: '#fe6a00',\n              strokeWidth: 1,\n              fill: '#fff',\n              style: {\n                visibility: 'hidden'\n              }\n            }\n          }\n        },\n        right: {\n          position: 'right',\n          attrs: {\n            circle: {\n              r: 4,\n              magnet: true,\n              stroke: '#fe6a00',\n              strokeWidth: 1,\n              fill: '#fff',\n              style: {\n                visibility: 'hidden'\n              }\n            }\n          }\n        },\n        bottom: {\n          position: 'bottom',\n          attrs: {\n            circle: {\n              r: 4,\n              magnet: true,\n              stroke: '#fe6a00',\n              strokeWidth: 1,\n              fill: '#fff',\n              style: {\n                visibility: 'hidden'\n              }\n            }\n          }\n        },\n        left: {\n          position: 'left',\n          attrs: {\n            circle: {\n              r: 4,\n              magnet: true,\n              stroke: '#fe6a00',\n              strokeWidth: 1,\n              fill: '#fff',\n              style: {\n                visibility: 'hidden'\n              }\n            }\n          }\n        }\n      },\n      items: [\n        {\n          group: 'top'\n        },\n        {\n          group: 'right'\n        },\n        {\n          group: 'bottom'\n        },\n        {\n          group: 'left'\n        }\n      ]\n    }\n  }\n  // 渲染所有左侧控件图形\n  const loadStencil= ()=> {\n    Graph.registerNode(\n        'custom-rect',\n        {\n          inherit: 'rect',\n          width: 80,\n          height: 36,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#fe6a00',\n              fill: '#fcf0e6'\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626'\n            }\n          },\n          ports: { ...ports }\n        },\n        true\n    )\n\n    Graph.registerNode(\n        'custom-polygon',\n        {\n          inherit: 'polygon',\n          width: 80,\n          height: 38,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#fe6a00',\n              fill: '#fcf0e6'\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626'\n            }\n          },\n          ports: {...ports}\n        },\n        true\n    )\n\n    Graph.registerNode(\n        'custom-circle',\n        {\n          inherit: 'circle',\n          width: 48,\n          height: 48,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#fe6a00',\n              fill: '#fcf0e6'\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626'\n            }\n          },\n          ports: { ...ports }\n        },\n        true\n    )\n    Graph.registerNode(\n        'custom-cylinder',\n        {\n          inherit: 'cylinder',\n          width: 62,\n          height: 48,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#fe6a00',\n              fill: '#fcf0e6'\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626',\n              refY: 32\n            },\n            top: {\n              strokeWidth: 1,\n              stroke: '#fe6a00',\n              fill: '#fcf0e6'\n            }\n          },\n          ports: { ...ports }\n        },\n        true\n    )\n\n    Graph.registerNode(\n        'custom-text',\n        {\n          inherit: 'text-block',\n          width: 60,\n          height: 36,\n          attrs: {\n            body: {\n              // strokeWidth: 0,\n              rx: 4,\n              ry: 4,\n              fill: '#fff',\n              stroke: '#fff'\n            },\n            text: {\n              fontSize: 12,\n              fill: '#000'\n            }\n          },\n          ports: { ...ports }\n        },\n        true\n    )\n\n    Graph.registerNode(\n        'custom-path',\n        {\n          inherit: 'path',\n          width: 60,\n          height: 36,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#fe6a00',\n              fill: '#fcf0e6'\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626'\n            }\n          },\n          ports: { ...ports }\n        },\n        true\n    )\n    Graph.registerNode(\n        'custom-image',\n        {\n          inherit: 'rect',\n          width: 52,\n          height: 52,\n          markup: [\n            {\n              tagName: 'rect',\n              selector: 'body'\n            },\n            {\n              tagName: 'image'\n            },\n            {\n              tagName: 'text',\n              selector: 'label'\n            }\n          ],\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#ff8833',\n              fill: '#ff8833'\n            },\n            image: {\n              width: 26,\n              height: 26,\n              refX: 13,\n              refY: 16\n            },\n            label: {\n              refX: 3,\n              refY: 2,\n              textAnchor: 'left',\n              textVerticalAnchor: 'top',\n              fontSize: 12,\n              fill: '#fff'\n            }\n          },\n          ports: { ...ports }\n        },\n        true\n    )\n\n    const r1 = graph.createNode({\n      shape: 'custom-rect',\n      attrs: {\n        body: {\n          rx: 6,\n          ry: 6\n        }\n      },\n      label: '工具组件'\n    })\n    const r2 = graph.createNode({\n      shape: 'custom-rect',\n      attrs: {\n        body: {\n          rx: 6,\n          ry: 6\n        }\n      },\n      label: '提取组件'\n    })\n    const r3 = graph.createNode({\n      shape: 'custom-polygon',\n      attrs: {\n        body: {\n          refPoints: '0,10 10,0 20,10 10,20'\n        }\n      },\n      label: '条件'\n    })\n    // const r5 = graph.createNode({\n    //   shape: 'custom-polygon',\n    //   attrs: {\n    //     body: {\n    //       refPoints: '10,0 40,0 30,20 0,20'\n    //     }\n    //   },\n    //   label: '数据'\n    // })\n    // const r6 = graph.createNode({\n    //   shape: 'custom-circle',\n    //   label: '连接'\n    // })\n    // const r7 = graph.createNode({\n    //   shape: 'custom-cylinder',\n    //   label: '数据库'\n    // })\n    // const r8 = graph.createNode({\n    //   shape: 'custom-path',\n    //   label: '文档',\n    //   attrs: {\n    //     body: {\n    //       refD: 'M 0 0 0 4 C 10 8 15 2 25 5 L 25 0 Z'\n    //     }\n    //   }\n    // })\n    // const r9 = graph.createNode({\n    //   shape: 'custom-path',\n    //   label: '手动输入',\n    //   attrs: {\n    //     body: {\n    //       refD: 'M 0 7 0 15 15 15 15 5 Z'\n    //     }\n    //   }\n    // })\n    // const r10 = graph.createNode({\n    //   shape: 'custom-text',\n    //   text: '文本'\n    // })\n    // stencil.load([r1, r2, r3, r4, r5, r6, r7, r8, r9, r10], 'group1')\n    stencil.load([ r1, r2, r3], 'group1')\n    // const imageShapes = [\n    //   {\n    //     label: 'Client',\n    //     image:\n    //         'https://gw.alipayobjects.com/zos/bmw-prod/687b6cb9-4b97-42a6-96d0-34b3099133ac.svg'\n    //   },\n    //   {\n    //     label: 'Http',\n    //     image:\n    //         'https://gw.alipayobjects.com/zos/bmw-prod/dc1ced06-417d-466f-927b-b4a4d3265791.svg'\n    //   },\n    //   {\n    //     label: 'Api',\n    //     image:\n    //         'https://gw.alipayobjects.com/zos/bmw-prod/c55d7ae1-8d20-4585-bd8f-ca23653a4489.svg'\n    //   },\n    //   {\n    //     label: 'Sql',\n    //     image:\n    //         'https://gw.alipayobjects.com/zos/bmw-prod/6eb71764-18ed-4149-b868-53ad1542c405.svg'\n    //   },\n    //   {\n    //     label: 'Clound',\n    //     image:\n    //         'https://gw.alipayobjects.com/zos/bmw-prod/c36fe7cb-dc24-4854-aeb5-88d8dc36d52e.svg'\n    //   },\n    //   {\n    //     label: 'Mq',\n    //     image:\n    //         'https://gw.alipayobjects.com/zos/bmw-prod/2010ac9f-40e7-49d4-8c4a-4fcf2f83033b.svg'\n    //   }\n    // ]\n    // const imageNodes = imageShapes.map((item) =>\n    //     graph.createNode({\n    //       shape: 'custom-image',\n    //       label: item.label,\n    //       attrs: {\n    //         image: {\n    //           'xlink:href': item.image\n    //         }\n    //       }\n    //     })\n    // )\n    // stencil.load(imageNodes, 'group2')\n  }\n  return  {stencil,ports,initStencil,initPorts,loadStencil}\n}\nconst configVisible = ref(false)\nconst graphCon = ref()\n// 右侧配置面板\nconst useConfigPanel = ()=> {\n  // 收缩配置面板\n  const handleCloseConfig = () =>{\n    configVisible.value = false\n    // graphCon.value.style.width = 'calc(100% - 250px)'\n  }\n  // 展开配置面板\n  const handleOpenConfig = ()=> {\n    configVisible.value = true\n    // graphCon.value.style.width = 'calc(100% - 600px - 250px)'\n  }\n  return {configVisible,graphCon,handleCloseConfig,handleOpenConfig}\n}\n// 当前版本id\nlet currentVersionId = ref(1)\n// 画布节点相关接口\nconst useNodeEffect = ()=>{\n  const isDisabled = ref(false)\n  let processNode = ref([])\n  let processLink = ref([])\n  let data = {nodes:[],edges:[]}\n  // 调后端创建节点接口\n  const createNodeApi = async(node)=>{\n    const pos = node.position()\n    const name = node.shape===\"custom-text\"?node.attrs.label?.text:node.attrs.text?.text\n    let req = {\n      \"processNode\": {\n        \"versionId\": currentVersionId.value,\n        \"processInstanceId\": Number(processInstanceId.value),\n        \"uuid\": node.id,\n        \"name\": name,\n        \"type\": node.shape,\n        \"ports\": JSON.stringify(node.getPorts()),\n        \"position\": pos.x+\",\"+pos.y,\n        \"size\": node.size().width+\",\"+node.size().height,\n        \"createdBy\": author.value,\n        \"updatedBy\": author.value,\n      },\n      \"processInstanceParameter\": [\n        {\n          \"versionId\": currentVersionId.value,\n          \"parameterType\": \"样式信息\",\n          \"parameterName\": \"style\",\n          \"parameterValue\": \"{\" +\n              \"\\\"label\\\": \\\"\"+name+\"\\\", \" +\n              \"\\\"fontSize\\\": \\\"\"+node.attrs.text?.fontSize+\"\\\", \" +\n              \"\\\"textFill\\\": \\\"\"+node.attrs.text?.fill+\"\\\", \" +\n              \"\\\"bodyFill\\\": \\\"\"+node.attrs.body?.fill+\"\\\"}\",\n          \"createdBy\": author.value,\n          \"updatedBy\": author.value,\n        },\n        {\n          \"versionId\": currentVersionId.value,\n          \"parameterType\": \"参数信息\",\n          \"parameterName\": \"params\",\n          \"parameterValue\": null,\n          \"createdBy\": author.value,\n          \"updatedBy\": author.value,\n        }\n      ]\n    }\n    await createNode(req).then(res=>{\n      if(res.code === 0){\n        message.success(\"[\"+req.processNode.name+\"]节点创建成功;\"+\"id:\"+node.id)\n      } else {\n        message.error(\"[\"+req.processNode.name+\"]节点创建失败：\"+res.message)\n        graph.removeNode(node)\n      }\n    })\n  }\n  // 调后端删除节点接口\n  const deleteNodeApi = async(node)=>{\n    let req = {\n      versionId: Number(currentVersionId.value),\n      processInstanceId: Number(processInstanceId.value),\n      uuid: node.id,\n      updatedBy: author.value\n    }\n    await deleteNode(req).then(res=>{\n      if (res.code === 0){\n        message.success(\"节点删除成功;\"+\"id:\"+node.id)\n        graph.removeNode(node)\n        useConfigPanel().handleCloseConfig()\n      } else {\n        message.error(\"节点删除失败:\"+res.message)\n      }\n    })\n  }\n  // 调后端接口更新node位置\n  const updateXY = async(node,x,y)=>{\n    let req = {\n      versionId: Number(currentVersionId.value),\n      processInstanceId: Number(processInstanceId.value),\n      uuid: node.id,\n      updatedBy: author.value,\n      position: x+\",\"+y\n    }\n    await updateNodeCoordinate(req).then(res=>{\n      if(res.code === 0){\n        console.log(\"节点位置更新成功;\"+\"id:\"+node.id)\n      } else {\n        message.error(\"节点位置更新失败：\"+res.message)\n      }\n    })\n  }\n  // 调后端接口更新node的大小\n  const updateSize = async(node,width,height)=>{\n    let req = {\n      versionId: Number(currentVersionId.value),\n      processInstanceId: Number(processInstanceId.value),\n      uuid: node.id,\n      updatedBy: author.value,\n      size: width+\",\"+height\n    }\n    await updateNodeSize(req).then(res=>{\n      if(res.code === 0){\n        console.log(\"节点大小更新成功;\"+\"id:\"+node.id)\n      } else {\n        message.error(\"节点大小更新失败:\"+res.message)\n      }\n    })\n  }\n  // 调后端创建连线接口\n  const createLinkApi = async(edge)=>{\n    let req = {\n      \"sourceNodeId\": edge.getSourceCellId(),\n      \"targetNodeId\": null,\n      \"processLink\": {\n        \"versionId\": currentVersionId.value,\n        \"targetPortId\": edge.getTargetPortId(),\n        \"sourcePortId\": edge.getSourcePortId(),\n        \"processInstanceId\": Number(processInstanceId.value),\n        \"uuid\": edge.id,\n        \"lineCondition\": null,\n        \"createdBy\": author.value,\n        \"updatedBy\": author.value,\n      },\n      \"processInstanceParameter\": [\n        {\n          \"versionId\": currentVersionId.value,\n          \"parameterType\": \"样式信息\",\n          \"parameterName\": \"style\",\n          \"parameterValue\": \"{\" +\n              \"\\\"line\\\": \\\"\\\", \" +\n              \"\\\"arrow\\\": \\\"1\\\", \" +\n              \"\\\"color\\\": \\\"\"+edge?.attrs?.line?.stroke+\"\\\", \" +\n              \"\\\"text\\\": \\\"\\\"\" +\n              \"}\",\n          \"createdBy\": author.value,\n          \"updatedBy\": author.value\n        },\n        {\n          \"versionId\": currentVersionId.value,\n          \"parameterType\": \"参数信息\",\n          \"parameterName\": \"params\",\n          \"parameterValue\": \"{}\",\n          \"createdBy\": author.value,\n          \"updatedBy\": author.value\n        }\n      ]\n    }\n    await createLink(req).then(res=>{\n      if(res.code === 0){\n        console.log(\"连线创建成功;id:\"+edge.id)\n        // node.id = res.data.id\n      } else {\n        message.error(\"连线创建失败:\"+res.message)\n        graph.removeEdge(edge)\n      }\n    })\n  }\n  // 调后端更新连线目标\n  const updateTargetApi = async(obj)=>{\n    let req = {\n      \"targetNodeId\": obj.targetNodeId,\n      \"processLink\": {\n        \"versionId\": currentVersionId.value,\n        \"processInstanceId\": Number(processInstanceId.value),\n        \"targetPortId\": obj.targetPortId,\n        \"sourcePortId\": obj.sourcePortId,\n        \"uuid\": obj.id,\n        \"updatedBy\": author.value,\n      }\n    }\n    await updateLinkTarget(req).then(res=>{\n      if(res.code === 0){\n        console.log(\"连线目标更新成功;id:\"+obj.id)\n      } else {\n        message.error(\"连线目标更新失败;id:\"+res.message)\n        graph.removeEdge(obj)\n      }\n    })\n  }\n  // 调后端删除连线接口\n  const deleteLinkApi = async(edge)=>{\n    let req = {\n      versionId: Number(currentVersionId.value),\n      processInstanceId: Number(processInstanceId.value),\n      uuid: edge.id,\n      updatedBy: author.value\n    }\n    await deleteLink(req).then(res=>{\n      if(res.code === 0){\n        message.success(\"连线删除成功;\"+\"id:\"+edge.id)\n        graph.removeEdge(edge)\n        useConfigPanel().handleCloseConfig()\n      } else {\n        message.error(\"连线删除失败:\"+res.message)\n      }\n    })\n  }\n  // 调后端查询画布接口\n  const detailNodeLink = async(graph,versionId)=>{\n    let currentVersionStatus = 0\n    await detailInstance(versionId,Number(processInstanceId.value)).then(res=>{\n      if(res.code === 0){\n        data = {nodes:[],edges:[]} // 画布数据\n        processNode.value = res.data.processNodeResponse\n        processLink.value = res.data.processLinkResponse\n        currentVersionId.value = versionId==0?res.data.versionId:versionId // 0表示首次加载\n        // 组装node节点\n        processNode.value.forEach(curNode => {\n          let x = Number(curNode.processNode.position.split(\",\")[0])\n          let y = Number(curNode.processNode.position.split(\",\")[1])\n          let w = Number(curNode.processNode.size.split(\",\")[0])\n          let h = Number(curNode.processNode.size.split(\",\")[1])\n          let parameterValue = curNode?.processInstanceParameters?.find(item=>item.parameterName === \"style\")?.parameterValue\n          let strokeColor = parameterValue?JSON.parse(parameterValue).strokeColor:'#fe6a00'\n          switch (curNode.processNode.type){\n            case 'start':\n            case 'end':\n              data.nodes.push({\n                id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                x: x,       // Number，必选，节点位置的 x 值\n                y: y,       // Number，必选，节点位置的 y 值\n                width: w,  // Number，必选，节点大小的 width 值\n                height: h, // Number，必选，节点大小的 height 值\n                label: curNode.processNode.name , // String，节点标签\n                shape: 'custom-rect',\n                attrs: {\n                  body: {\n                    rx: 18,\n                    ry: 26\n                  }\n                },\n                ports: {\n                  groups: {\n                    top: {\n                      position: 'top',\n                      attrs: {\n                        circle: {\n                          r: 4,\n                          magnet: true,\n                          stroke: '#fe6a00',\n                          strokeWidth: 1,\n                          fill: '#fff',\n                          style: {\n                            visibility: 'hidden'\n                          }\n                        }\n                      }\n                    },\n                    right: {\n                      position: 'right',\n                      attrs: {\n                        circle: {\n                          r: 4,\n                          magnet: true,\n                          stroke: '#fe6a00',\n                          strokeWidth: 1,\n                          fill: '#fff',\n                          style: {\n                            visibility: 'hidden'\n                          }\n                        }\n                      }\n                    },\n                    bottom: {\n                      position: 'bottom',\n                      attrs: {\n                        circle: {\n                          r: 4,\n                          magnet: true,\n                          stroke: '#fe6a00',\n                          strokeWidth: 1,\n                          fill: '#fff',\n                          style: {\n                            visibility: 'hidden'\n                          }\n                        }\n                      }\n                    },\n                    left: {\n                      position: 'left',\n                      attrs: {\n                        circle: {\n                          r: 4,\n                          magnet: true,\n                          stroke: '#fe6a00',\n                          strokeWidth: 1,\n                          fill: '#fff',\n                          style: {\n                            visibility: 'hidden'\n                          }\n                        }\n                      }\n                    }\n                  },\n                  items: JSON.parse(curNode.processNode.ports)\n                }\n              })\n              break;\n            case 'tool':\n            case 'extract':\n            case 'auto':\n            case 'flow':\n              if (curNode.processInstanceParameters.length) {\n                curNode.processInstanceParameters.forEach(ps=>{\n                  if (ps.parameterName ==='style'){\n                    let style = JSON.parse(ps.parameterValue)\n                    data.nodes.push({\n                      id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                      x: x,       // Number，必选，节点位置的 x 值\n                      y: y,       // Number，必选，节点位置的 y 值\n                      width: w,  // Number，必选，节点大小的 width 值\n                      height: h, // Number，必选，节点大小的 height 值\n                      label: curNode.processNode.name , // String，节点标签\n                      shape: 'custom-rect',\n                      attrs: {\n                        body: {\n                          rx: 6,\n                          ry: 6,\n                          fill: style.bodyFill,\n                          stroke: strokeColor\n                        },\n                        text: {\n                          text: style.label,\n                          fontSize: style.fontSize,\n                          fill: style.textFill\n                        }\n                      },\n                      ports: {\n                        groups: {\n                          top: {\n                            position: 'top',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          right: {\n                            position: 'right',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          bottom: {\n                            position: 'bottom',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          left: {\n                            position: 'left',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          }\n                        },\n                        items: JSON.parse(curNode.processNode.ports)\n                      }// String，节点标签\n                    })\n                  }\n                })\n              }\n              else {\n                data.nodes.push({\n                  id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                  x: x,       // Number，必选，节点位置的 x 值\n                  y: y,       // Number，必选，节点位置的 y 值\n                  width: w,  // Number，必选，节点大小的 width 值\n                  height: h, // Number，必选，节点大小的 height 值\n                  label: curNode.processNode.name , // String，节点标签\n                  shape: 'custom-rect',\n                  attrs: {\n                    body: {\n                      rx: 6,\n                      ry: 6,\n                      stroke: strokeColor\n                    }\n                  },\n                  ports: {\n                    groups: {\n                      top: {\n                        position: 'top',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      right: {\n                        position: 'right',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      bottom: {\n                        position: 'bottom',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      left: {\n                        position: 'left',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      }\n                    },\n                    items: JSON.parse(curNode.processNode.ports)\n                  }// String，节点标签\n                })\n              }\n              break;\n            case 'database':\n              if (curNode.processInstanceParameters.length) {\n                curNode.processInstanceParameters.forEach(ps=>{\n                  if (ps.parameterName ==='style'){\n                    let style = JSON.parse(ps.parameterValue)\n                    data.nodes.push({\n                      id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                      x: x,       // Number，必选，节点位置的 x 值\n                      y: y,       // Number，必选，节点位置的 y 值\n                      width: w,  // Number，必选，节点大小的 width 值\n                      height: h, // Number，必选，节点大小的 height 值\n                      label: curNode.processNode.name , // String，节点标签\n                      shape: 'custom-cylinder',\n                      attrs: {\n                        body: {\n                          fill: style.bodyFill,\n                          stroke: strokeColor\n                        },\n                        text: {\n                          text: style.label,\n                          fontSize: style.fontSize,\n                          fill: style.textFill\n                        }\n                      },\n                      ports: {\n                        groups: {\n                          top: {\n                            position: 'top',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          right: {\n                            position: 'right',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          bottom: {\n                            position: 'bottom',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          left: {\n                            position: 'left',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          }\n                        },\n                        items: JSON.parse(curNode.processNode.ports)\n                      }// String，节点标签\n                    })\n                  }\n                })\n              }\n              else {\n                data.nodes.push({\n                  id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                  x: x,       // Number，必选，节点位置的 x 值\n                  y: y,       // Number，必选，节点位置的 y 值\n                  width: w,  // Number，必选，节点大小的 width 值\n                  height: h, // Number，必选，节点大小的 height 值\n                  label: curNode.processNode.name , // String，节点标签\n                  shape: 'custom-cylinder',\n                  ports: {\n                    groups: {\n                      top: {\n                        position: 'top',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      right: {\n                        position: 'right',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      bottom: {\n                        position: 'bottom',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      left: {\n                        position: 'left',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      }\n                    },\n                    items: JSON.parse(curNode.processNode.ports)\n                  }// String，节点标签\n                })\n              }\n              break;\n            case 'condition':\n              if (curNode.processInstanceParameters.length) {\n                curNode.processInstanceParameters.forEach(ps=>{\n                  if (ps.parameterName ==='style'){\n                    let style = JSON.parse(ps.parameterValue)\n                    data.nodes.push({\n                      id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                      x: x,       // Number，必选，节点位置的 x 值\n                      y: y,       // Number，必选，节点位置的 y 值\n                      width: w,  // Number，必选，节点大小的 width 值\n                      height: h, // Number，必选，节点大小的 height 值\n                      label: curNode.processNode.name , // String，节点标签\n                      shape: 'custom-polygon',\n                      attrs: {\n                        body: {\n                          refPoints: '0,10 10,0 20,10 10,20',\n                          fill: style.bodyFill\n                        },\n                        text: {\n                          text: style.label,\n                          fontSize: style.fontSize,\n                          fill: style.textFill\n                        }\n                      },\n                      ports: {\n                        groups: {\n                          top: {\n                            position: 'top',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          right: {\n                            position: 'right',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          bottom: {\n                            position: 'bottom',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          },\n                          left: {\n                            position: 'left',\n                            attrs: {\n                              circle: {\n                                r: 4,\n                                magnet: true,\n                                stroke: '#fe6a00',\n                                strokeWidth: 1,\n                                fill: '#fff',\n                                style: {\n                                  visibility: 'hidden'\n                                }\n                              }\n                            }\n                          }\n                        },\n                        items: JSON.parse(curNode.processNode.ports)\n                      }// String，节点标签\n                    })\n                  }\n                })\n              }\n              else {\n                data.nodes.push({\n                  id: curNode.processNode.uuid, // String，可选，节点的唯一标识\n                  x: x,       // Number，必选，节点位置的 x 值\n                  y: y,       // Number，必选，节点位置的 y 值\n                  width: w,  // Number，必选，节点大小的 width 值\n                  height: h, // Number，必选，节点大小的 height 值\n                  label: curNode.processNode.name , // String，节点标签\n                  shape: 'custom-polygon',\n                  attrs: {\n                    body: {\n                      refPoints: '0,10 10,0 20,10 10,20'\n                    }\n                  },\n                  ports: {\n                    groups: {\n                      top: {\n                        position: 'top',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      right: {\n                        position: 'right',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      bottom: {\n                        position: 'bottom',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      },\n                      left: {\n                        position: 'left',\n                        attrs: {\n                          circle: {\n                            r: 4,\n                            magnet: true,\n                            stroke: '#fe6a00',\n                            strokeWidth: 1,\n                            fill: '#fff',\n                            style: {\n                              visibility: 'hidden'\n                            }\n                          }\n                        }\n                      }\n                    },\n                    items: JSON.parse(curNode.processNode.ports)\n                  }// String，节点标签\n                })\n              }\n              break;\n          }\n        })\n        // 组装连线节点\n        processLink.value.forEach(curLink=>{\n          if (curLink.processInstanceParameters.length){\n            curLink.processInstanceParameters.forEach(ps=>{\n              if (ps.parameterName ==='style'){\n                let style = JSON.parse(ps.parameterValue)\n                data.edges.push({\n                  source: { cell: curLink.sourceUuid, port: curLink.processLink.sourcePortId },\n                  target: { cell: curLink.targetUuid, port: curLink.processLink.targetPortId },\n                  id: curLink.processLink.uuid,\n                  label: curLink.processLink.lineCondition,\n                  attrs: {\n                    text: {\n                      text: style.text\n                    },\n                    line: {\n                      stroke: style.color\n                    }\n                  }\n                })\n              }\n            })\n          }\n        })\n        currentVersionStatus = res.data?.processInstanceVersions.filter(item=>item.id === currentVersionId.value)[0].status\n        console.log(\"画布加载成功\")\n        graph.fromJSON(data)\n      } else {\n        message.error(\"画布加载失败；失败原因：\"+res.message)\n      }\n      if (currentVersionStatus === 1 || currentVersionStatus=== 2){\n        message.warning(\"当前版本已经发布/下线，不能进行修改\")\n        isDisabled.value = true\n      } else {\n        isDisabled.value = false\n      }\n    })\n  }\n  return {createNodeApi,deleteNodeApi,createLinkApi,deleteLinkApi,detailNodeLink,updateXY,updateSize,updateTargetApi,isDisabled}\n}\n\nexport default {\n  name: \"FlowDetail\",\n  components: {GraphConfigContainer,NodeConfigContainer,EdgeConfigContainer},\n  setup() {\n    const router = useRouter()\n    const store = useStore()\n    processInstanceId.value = router.currentRoute.value.params.processInstanceId\n    author.value = store.state.user.account\n    const {initGraph,graphOnEvent,graphBindKey} = useGraphEffect()\n    const {stencil,ports,initStencil,initPorts,loadStencil} = useStencilEffect()\n    const {configVisible,graphCon,handleCloseConfig,handleOpenConfig} = useConfigPanel()\n    const {createNodeApi,deleteNodeApi,createLinkApi,deleteLinkApi,detailNodeLink,isDisabled} = useNodeEffect()\n    const graphConfig = ref()\n    configVisible.value = false\n    onMounted(()=>{\n      // 初始化画布\n      initGraph()\n      // 绑定画布快捷键\n      graphBindKey()\n      // 画布绑定监听事件\n      graphOnEvent()\n      // 初始化流程控件面板\n      initStencil()\n      // 初始化连接桩\n      initPorts()\n      // 渲染所有左侧控件图形\n      loadStencil()\n      graphConfig.value = graph\n      // 调后端接口获取渲染数据\n      detailNodeLink(graph,0)\n    })\n    const footerContent = (\n      <div style=\"display: flex; justify-content: flex-end; margin-right: 90px;\">\n        <a-button onClick={handleCloseConfig}>取消</a-button>\n      </div>\n    )\n    // 更新画布的版本号以及版本对应的数据\n    const handleUpdateVersion = (record) =>{\n      console.log(\"更新版本号\"+record.id)\n      currentVersionId.value = record.id\n      detailNodeLink(graph,currentVersionId.value)\n      // if (record.status ==1 || record.status ==2){\n      //   message.warning(\"当前版本已经发布/下线，不能进行修改\")\n      //   isDisabled.value = true\n      // } else {\n      //   isDisabled.value = false\n      // }\n    }\n    return {\n      graph,initGraph,graphOnEvent,graphBindKey,\n      stencil,initStencil,\n      ports,initPorts,loadStencil,\n      curNode,curEdge,isNode,\n      graphCon,configVisible,handleCloseConfig,handleOpenConfig,\n      graphConfig,\n      createNodeApi,deleteNodeApi,createLinkApi,deleteLinkApi,detailNodeLink,\n      footerContent,\n      currentVersionId,\n      processInstanceId,\n      handleUpdateVersion,\n      isDisabled\n    }\n  }\n}\n</script>\n\n<style scoped>\n/*.shade {*/\n/*  position: fixed;*/\n/*  top: 0;*/\n/*  left: 0;*/\n/*  z-index: 1;*/\n/*  width: 100%;*/\n/*  height: 100%;*/\n/*  background-color: rgba(0, 0, 0, 0.5);*/\n/*}*/\n.flow-div {\n  position: fixed;\n  overflow: auto;\n  top: 64px;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #fff;\n  border: 0;\n  border-radius: 0px;\n  padding:0;\n  margin:0;\n  height: auto;\n}\n#container {\n  display: flex;\n  border: 1px solid #dfe3e8;\n  height: 100%;\n  width: 100%;\n}\n#stencil {\n  width: 250px;\n  height: 100%;\n  position: relative;\n  border-right: 1px solid #dfe3e8;\n}\n#graph-container {\n  /*width: calc(100% - 500px);*/\n  width: 100%;\n  height: 100%;\n  /*background-color: #fffbe6*/\n}\n#config-container {\n  z-index: 2;\n  position: relative;\n  width: 600px;\n  height: 100%;\n  border-left: 1px solid #dfe3e8;\n}\n.collpase-icon {\n  position: absolute;\n  top: 30px;\n  left: -8px;\n  color: #ff7c34;\n  background-color: #fff;\n  cursor: pointer;\n  font-size: 22px;\n}\n.open-icon{\n  position: relative;\n  top: 30px;\n  right: 8px;\n  color: #ff7c34;\n  background-color: #fff;\n  cursor: pointer;\n  font-size: 22px;\n}\n.drawer-iconfont{\n  position: absolute;\n  top: 100px;\n  left: 100px;\n}\n.color-container {\n  width: 24px;\n  height: 24px;\n  padding: 4px;\n  border: 1px solid #dfe3e8;\n  border-radius: 2px;\n}\n.edit-color {\n  cursor: pointer;\n  height: 100%;\n}\n/deep/ .x6-widget-stencil  {\n  background-color: #fff;\n}\n/deep/ .x6-widget-stencil-title {\n  background-color: rgba(0,0,0,.03)\n}\n/deep/ .x6-widget-stencil-group-title {\n  background-color: rgba(0,0,0,.03)\n}\n.x6-widget-transform {\n  margin: -1px 0 0 -1px;\n  padding: 0px;\n  border: 1px solid #239edd;\n}\n.x6-widget-transform > div {\n  border: 1px solid #239edd;\n}\n.x6-widget-transform > div:hover {\n  background-color: #3dafe4;\n}\n.x6-widget-transform-active-handle {\n  background-color: #3dafe4;\n}\n.x6-widget-transform-resize {\n  border-radius: 0;\n}\n.x6-widget-selection-inner {\n  border: 1px solid #239edd;\n}\n.x6-widget-selection-box {\n  opacity: 0;\n}\n.disabled-item {\n  pointer-events: none;\n  opacity: 0.6;\n}\n</style>\n"]}]}