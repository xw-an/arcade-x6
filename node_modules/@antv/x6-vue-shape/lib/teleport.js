"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTeleport = void 0;
var vue_demi_1 = require("vue-demi");
var x6_1 = require("@antv/x6");
var view_1 = require("./view");
function useTeleport(uniqViewId) {
    if (vue_demi_1.isVue3) {
        var _a = vue_demi_1.Vue, Teleport_1 = _a.Teleport, markRaw_1 = _a.markRaw, Fragment_1 = _a.Fragment, VNode_1 = _a.VNode, VNodeData_1 = _a.VNodeData;
        var action_1 = 'vue';
        var items_1 = (0, vue_demi_1.reactive)({});
        var TeleportContainer = (0, vue_demi_1.defineComponent)({
            setup: function () {
                return function () {
                    return (0, vue_demi_1.h)(Fragment_1, {}, Object.keys(items_1).map(function (id) { return (0, vue_demi_1.h)(items_1[id]); }));
                };
            },
        });
        var connect_1 = function (id, node, graph, component, getContainer) {
            if (items_1[id]) {
                // confirmUpdate可能导致多次调用，所以判断一下
                return;
            }
            items_1[id] = markRaw_1((0, vue_demi_1.defineComponent)({
                render: function () {
                    return (getContainer()
                        ? (0, vue_demi_1.h)(Teleport_1, { to: getContainer() }, [
                            (0, vue_demi_1.h)(component, { graph: graph, node: node }),
                        ])
                        : null);
                },
                provide: function () { return ({
                    getGraph: function () { return graph; },
                    getNode: function () { return node; },
                }); },
            }));
        };
        var disconnect_1 = function (id) {
            delete items_1[id];
        };
        var VuePortalShapeView = /** @class */ (function (_super) {
            __extends(VuePortalShapeView, _super);
            function VuePortalShapeView() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            VuePortalShapeView.prototype.getTargetId = function () {
                return this.graph.view.cid + ":" + this.cell.id;
            };
            VuePortalShapeView.prototype.init = function () {
                _super.prototype.init.call(this);
                var targetId = this.getTargetId();
                this.cell.on('removed', function () {
                    disconnect_1(targetId);
                });
                this.renderVueComponent();
            };
            VuePortalShapeView.prototype.renderVueComponent = function () {
                var targetId = this.getTargetId();
                var component = this.graph.hook.getVueComponent(this.cell);
                // 这里需要将当前View的cell以及graph还有component等对象存储起来给TeleportContainer使用
                connect_1(targetId, this.cell, this.graph, component, this.getComponentContainer.bind(this));
            };
            VuePortalShapeView.prototype.getComponentContainer = function () {
                return this.cell.prop('useForeignObject') === false
                    ? this.selectors.content
                    : this.selectors.foContent;
            };
            VuePortalShapeView.prototype.confirmUpdate = function (flag) {
                var _this = this;
                var ret = _super.prototype.confirmUpdate.call(this, flag);
                return this.handleAction(ret, action_1, function () {
                    // 参照VueShapeView进行渲染，修复 #2505
                    x6_1.Scheduler.scheduleTask(function () {
                        _this.renderVueComponent();
                    });
                });
            };
            VuePortalShapeView.prototype.unmount = function (elem) {
                // 基类调用removeView的时候，会自动调用unmount
                var targetId = this.getTargetId();
                disconnect_1(targetId);
                _super.prototype.unmount.call(this, elem);
                return this;
            };
            return VuePortalShapeView;
        }(x6_1.NodeView));
        VuePortalShapeView.config({
            bootstrap: [action_1],
            actions: {
                component: action_1,
            },
        });
        x6_1.NodeView.registry.register(uniqViewId, VuePortalShapeView, true);
        return TeleportContainer;
    }
    // 如果是vue2就默认输出一个警告信息
    console.warn('useTeleport should run in vue3');
    // 或者拿默认的view注册一个，保证这个api是可用状态，不至于用户使用了，但是报错
    x6_1.NodeView.registry.register(uniqViewId, view_1.VueShapeView, true);
    return (0, vue_demi_1.defineComponent)(function () { return null; });
}
exports.useTeleport = useTeleport;
exports.default = useTeleport;
//# sourceMappingURL=teleport.js.map